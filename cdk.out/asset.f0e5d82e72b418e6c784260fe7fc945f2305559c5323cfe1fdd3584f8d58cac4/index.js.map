{
  "version": 3,
  "sources": ["../asset-input/src/functions/auth/create-auth-challenge/index.ts"],
  "sourcesContent": ["import * as crypto from 'crypto';\n\nexport const handler = async (event: any) => {\n    let secretLoginCode: string;\n    if (!event.request.session || !event.request.session.length) {\n        // Generate a new secret login code only if one hasn't been generated already\n        secretLoginCode = crypto.randomInt(100000, 999999).toString();\n    } else {\n        // Re-use code if this isn't the first challenge\n        const previousChallenge = event.request.session.slice(-1)[0];\n        secretLoginCode = previousChallenge.challengeMetadata;\n    }\n\n    // This is the response object Cognito expects\n    event.response = {\n        publicChallengeParameters: {\n            email: event.request.userAttributes.email\n        },\n        privateChallengeParameters: {\n            secretLoginCode\n        },\n        challengeMetadata: secretLoginCode\n    };\n\n    return event;  // Return the entire event object\n}; "],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAwB,qBAEXF,EAAU,MAAOG,GAAe,CACzC,IAAIC,EACJ,MAAI,CAACD,EAAM,QAAQ,SAAW,CAACA,EAAM,QAAQ,QAAQ,OAEjDC,EAAyB,YAAU,IAAQ,MAAM,EAAE,SAAS,EAI5DA,EAD0BD,EAAM,QAAQ,QAAQ,MAAM,EAAE,EAAE,CAAC,EACvB,kBAIxCA,EAAM,SAAW,CACb,0BAA2B,CACvB,MAAOA,EAAM,QAAQ,eAAe,KACxC,EACA,2BAA4B,CACxB,gBAAAC,CACJ,EACA,kBAAmBA,CACvB,EAEOD,CACX",
  "names": ["create_auth_challenge_exports", "__export", "handler", "__toCommonJS", "crypto", "event", "secretLoginCode"]
}
